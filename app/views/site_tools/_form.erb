<section>
  <%= semantic_form_for Using.new, :as => Using.new, :url => site_tools_path(@site), :remote => true, :html => { :id => "new_using", :name => "new_using" } do |form| %>
    <%= form.inputs do %>
      <%= form.input :tool_id, :as => :hidden %>
      <%= form.input :tool_name, 
            :label => "Tool Name", 
            :wrapper_html => { :class => "tool_name_autocomplete" },
            :hint => "test",
            :input_html => {
              :placeholder => "Start typing the name of a tool... If it doesn't exist we'll add it.", 
              :class => "autocomplete-toolname" } %>
      <%= form.input :tool_url, :label => "Tool URL", :required => false, :input_html => { :placeholder => "If adding a new tool, please try to add a URL for it." } %>
      <li class="countdown"><span>300</span></li>
      <%= form.input :description, :label => "How is this tool being used?", :as => :text, :required => false, :input_html => { :rows => 3 } %>
      <%= form.commit_button :button_html => { :value => "add this tool", :class => "right" } %>
      <%= form.commit_button :button_html => { :type => "reset", :id => "reset_button", :value => "reset", :class => "left" } %>
    <% end %>
  <% end %>
  
  <div>
    <h3>Manage Tools used on <%= @site.title %></h3>
    <ul class="usings">
      <%= render :partial => 'using', :collection => @usings %>
    </ul>
  </div>
</section>

<% javascript do %>
$(function() {
  
  var cache = {}, lastXhr;
	$("#using_tool_name").autocomplete({
		minLength: 1,
		source: function(request, response) {
			var term = request.term;
			if (term in cache) {
				response(cache[term]);
				return;
			}

      $("#using_tool_name").css({ "background": "url(/images/indicator.gif) no-repeat 4px 4px"});
      $("li.tool_name_autocomplete label").addClass("loading");
			lastXhr = $.getJSON("/sites/<%=@site.cached_slug%>/tools/autocomplete", request, function(data, status, xhr) {
				cache[term] = data;
				if (xhr === lastXhr) {
					response(data);
				}
			});
		},
		focus: function(event, ui) {
			$("#using_tool_name").val(ui.item.name);
			return false;
		},
		select: function(event, ui) {
			$("#using_tool_name").val(ui.item.name).css({ "background": "url("+ui.item.icon+") no-repeat 4px 4px"});
			$("#using_tool_id").val(ui.item.id);
			$("li.tool_name_autocomplete .inline-hints").html(ui.item.categories).show();
			$("#using_tool_url").addClass("found").val(ui.item.url).attr("disabled", "disabled");
			return false;
		}
	});
	
	$.ui.autocomplete.prototype._response = function(content) {
	  $("#using_tool_name").css({ "background": "url(/images/placeholder.jpg) no-repeat 4px 4px"});
		if ( !this.options.disabled && content && content.length ) {
			content = this._normalize( content );
			this._suggest( content );
			this._trigger( "open" );
		} else {
		  $("#using_tool_id").val("");
		  $("#using_tool_url").removeAttr("disabled").val("");
			this.close();
		}
		this.pending--;
		if ( !this.pending ) {
			this.element.removeClass( "ui-autocomplete-loading" );
		}
	};
	
	$.ui.autocomplete.prototype._renderItem = function( ul, item ) {
	  var icon = "";
	  $("#using_tool_name").css({ "background": "url(/images/placeholder.jpg) no-repeat 4px 4px"});
	  if(item.icon != "" && item.icon != null) { 
	    icon = "<img src='"+item.icon+"' />";
	  } else { 
	    icon = "<img src='/images/placeholder.jpg' />";
	  }
		return $("<li></li>")
			.data("item.autocomplete", item)
			.append("<a>" + icon + item.name + "<br>" + item.url + "</a>")
			.appendTo(ul);
	};
	
	
  $("#using_description").keyup(function() {
    var count = 140 - $(this).val().length;
    $(".countdown span").html(count);
    if(count < 0) { $(".countdown span").addClass("alert"); }
    else { $(".countdown span").removeClass("alert"); }
  });
  
  $('textarea.using_description').autoResize({
      // On resize:
      onResize : function() {
          $(this).css({opacity:0.8});
      },
      // After resize:
      animateCallback : function() {
          $(this).css({opacity:1});
      },
      // Quite slow animation:
      animateDuration : 300,
      // More extra space:
      extraSpace : 40
  });
  
  $('.edit-in-place-edit').live("click", function() {
    $(this).parents('.edit-in-place').addClass('editing').find(".edit-in-place-cancel").show();
    $(this).hide();
    return false;
  });
  $('.edit-in-place-cancel, .edit-in-place-cancel a').live("click", function() {
    $(this).parents('.edit-in-place').removeClass('editing').find(".edit-in-place-cancel").hide();
    $(this).parents('.edit-in-place').find(".edit-in-place-edit").show();
    return false;
  });
  $("#reset_button").click(function(e) {
    reset_new_using_form();
    e.preventDefault();
    return false;
  });
});

function reset_new_using_form() {
  $('#new_using')[0].reset();
  $("#using_tool_id").val("");
  $("#using_tool_name").css({ "background": "url(/images/placeholder.jpg) no-repeat 4px 4px"});
  $('.token-input-token').remove();
  $('.token-input-input-token input').show();
  $('#using_tool_url').removeAttr("disabled");
  $('li.tool_name_autocomplete .inline-hints').hide().hide();
}
<% end %>